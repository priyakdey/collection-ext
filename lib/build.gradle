/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.3/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id 'java-library'

    id 'jacoco'
    id "org.sonarqube" version "4.3.1.3277"
}

group = "com.priyakdey"
archivesBaseName = "collection-ext"
version = "0.0.1-alpha"

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

repositories {
    mavenCentral()
}

var junit5Version = project.properties['junit5.version']
var graphvizJavaVersion = project.properties['graphviz-java.version']

dependencies {
    compileOnly "guru.nidi:graphviz-java:$graphvizJavaVersion"

    testImplementation "org.junit.jupiter:junit-jupiter-engine:$junit5Version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit5Version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit5Version"
    testImplementation "org.junit.platform:junit-platform-launcher:1.10.0"
    testRuntimeOnly "guru.nidi:graphviz-java:$graphvizJavaVersion"


}

test {
    useJUnitPlatform()

    testLogging {
        lifecycle {
            events("passed", "skipped", "failed")

            showExceptions = true
            showCauses = true
            showStackTraces = true
        }

        info.events = lifecycle.events
        info.exceptionFormat = lifecycle.exceptionFormat
    }

    List<TestDescriptor> successTests = []
    List<TestDescriptor> failedTests = []
    List<TestDescriptor> skippedTests = []

    // ansi color codes
    Map<String, String> ansiColorCodes =
            ["RESET": "\u001B[0m", "RED": "\u001B[31m", "GREEN": "\u001B[32m", "YELLOW": "\u001B[33m"]


    def GREEN  = ansiColorCodes.GREEN
    def RED    = ansiColorCodes.RED
    def YELLOW = ansiColorCodes.YELLOW
    def RESET  = ansiColorCodes.RESET

    def CLASSNAME_COL_WIDTH = 20
    def TESTNAME_COL_WIDTH  = 70
    def STATUS_COL_WIDTH    = 10

    def TABLE_BORDER = "+" + ("-" * CLASSNAME_COL_WIDTH) + "+" + ("-" * TESTNAME_COL_WIDTH) + "+" + ("-" * STATUS_COL_WIDTH) + "+"
    def TABLE_HEADER = "|       Class        |                           Test Name                                  |  Status  |"

    addTestListener(new TestListener() {
        @Override
        void beforeSuite(TestDescriptor testDescriptor) {}

        @Override
        void beforeTest(TestDescriptor testDescriptor) {}


        @Override
        void afterTest(TestDescriptor testDescriptor, TestResult testResult) {
            switch (testResult.resultType) {
                case TestResult.ResultType.SUCCESS:
                    successTests.add(testDescriptor)
                    break;
                case TestResult.ResultType.FAILURE:
                    failedTests.add(testDescriptor)
                    break;
                case TestResult.ResultType.SKIPPED:
                    skippedTests.add(testDescriptor)
                    break
            }
        }

        @Override
        void afterSuite(TestDescriptor suite, TestResult testResult) {
            if (suite.parent == null) {
                logger.lifecycle("\n############################### Test Run Summary ###############################\n")
                logTestResultsTable()
                logStats()
                logger.lifecycle("\n################################################################################\n")
            }
        }

        private void logTestResultsTable() {
            logger.lifecycle(TABLE_BORDER)
            logger.lifecycle(TABLE_HEADER)
            logger.lifecycle(TABLE_BORDER)

            successTests.each {
                successTest -> logTestResult(successTest, "SUCCESS", GREEN, RESET)
            }

            skippedTests.each {
                skippedTest -> logTestResult(skippedTest, "SKIPPED", YELLOW, RESET)
            }

            failedTests.each {
                failedTest -> logTestResult(failedTest, "FAILED", RED, RESET)
            }

            logger.lifecycle(TABLE_BORDER)
        }

        private void logStats() {
            def successCount = successTests.size()
            def skippedCount = skippedTests.size()
            def failedCount = failedTests.size()
            def totalCount = successCount + skippedCount + failedCount

            logger.lifecycle("\nTest run statistics")
            logger.lifecycle("------------------------")

            printf("Total  : %d\n", totalCount)
            printf("Success: %d  (%2.2f%%)\n", successCount, (successCount / totalCount) * 100.0)
            printf("Skipped: %d  (%2.2f%%)\n", skippedCount, (skippedCount / totalCount) * 100.0)
            printf("Failed : %d  (%2.2f%%)\n", failedCount, (failedCount / totalCount) * 100.0)

        }

        private void logTestResult(TestDescriptor testDescriptor, String result, String colour1, String colour2) {
            def parentName = testDescriptor.parent.displayName
            def displayName = testDescriptor.getDisplayName()
            printf("|%s|%s|%s%s%s|\n", center(parentName, CLASSNAME_COL_WIDTH), center(displayName, TESTNAME_COL_WIDTH), colour1, center(result, STATUS_COL_WIDTH), colour2)
        }

        private String center(String s, int maxWidth) {
            if (s.length() > maxWidth) {
                return s.substring(0, maxWidth);
            }

            def leftPadding = (maxWidth - s.length()) / 2;
            return s.padLeft(s.length() + leftPadding).padRight(maxWidth)
        }

    })

    finalizedBy jacocoTestReport

}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
    dependsOn test
}

sonar {
    properties {
        property "sonar.projectKey", "priyakdey_collection-ext"
        property "sonar.organization", "priyak1991dey"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.token", System.getenv("SONAR_TOKEN")
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
    }
}
